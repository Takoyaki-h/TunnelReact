// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// Created by Umi Plugin

export interface IConfigFromPluginsJoi {
verifyCommit?: {
scope?: string[]
allowEmoji?: boolean
}
run?: {
globals?: string[]
}
access?: ({

} | boolean)
analytics?: ({
baidu?: string
ga?: string
ga_v2?: string
} | boolean)
antd?: ({
configProvider?: {

}
dark?: boolean
compact?: boolean
import?: boolean
style?: ("less" | "css")
theme?: {

}
appConfig?: {

}
} | boolean)
dva?: ({
extraModels?: string[]
immer?: {

}
skipModelValidate?: boolean
} | boolean)
initialState?: ({
loading?: string
} | boolean)
layout?: ({

} | boolean)
locale?: ({
default?: string
useLocalStorage?: boolean
baseNavigator?: boolean
title?: boolean
antd?: boolean
baseSeparator?: string
} | boolean)
mf?: {
name?: string
remotes?: {
aliasName?: string
name?: string
entry?: string
entries?: {

}
keyResolver?: string
}[]
shared?: {

}
library?: {

}
}
model?: ({
extraModels?: string[]
} | boolean)
moment2dayjs?: ({
preset?: string
plugins?: unknown[]
} | boolean)
qiankun?: ({
slave?: {

}
master?: {

}
externalQiankun?: boolean
} | boolean)
reactQuery?: {
devtool?: ({

} | boolean)
queryClient?: ({

} | boolean)
}
request?: ({
dataField?: ("" | string)
} | boolean)
styledComponents?: {
babelPlugin?: {

}
}
tailwindcss?: ({

} | boolean)
valtio?: {

}
openAPI?: ({
requestLibPath?: string
schemaPath?: string
mock?: boolean
projectName?: string
apiPrefix?: (string | (() => any))
namespace?: string
hook?: {
customFunctionName?: (() => any)
customClassName?: (() => any)
}
}[] | {
requestLibPath?: string
schemaPath?: string
mock?: boolean
projectName?: string
apiPrefix?: (string | (() => any))
namespace?: string
hook?: {
customFunctionName?: (() => any)
customClassName?: (() => any)
}
})
keepalive?: unknown[]
tabsLayout?: (boolean | {
hasCustomTabs?: boolean
hasDropdown?: boolean
hasFixedHeader?: boolean
})
requestRecord?: {
exclude?: unknown[]
type?: boolean
namespace?: string
comment?: boolean
outputDir?: string
successFilter?: (() => any)
role?: string
mock?: {
outputDir?: string
fileName?: string
usingRole?: string
}
}
}
